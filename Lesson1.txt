How did viewing a diff between two versions help you spot the bug?
If you know the older one worked, thus any changes must have broken it.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You can quickly recall old tricks and code that may have become outdated in the current version but still have use in other places.

What do you think are the pros and cons of manually choosing when to commit, like you do in Gir, vs having versions automatically saved, like Google Docs does?
Pros: Breaks/commits are at logical places and represent complete changes in code or functionality.
Cons: If you forget to log code in, you could lose some or just forget to do it entirely.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
I would guess it mostly has to do with the intended use of each system.  Git is for coders and files that interact.  Docs is for laymen and files that stand on their own.

How can you use commands git log and git diff to view the history of files?
By reading the summaries.  This seems like a retorical question.

How might using version control make you more confident to make changes that could break something?
Obviously you can experiment more quickly if you can confidently revert to previous states you knew worked.

Now that you have your workspace set up, what do you want to try using Git for?
learning python and recreating my IDL plotting and reading capabilities
